// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////
// ENUMS
//////////////////////

enum Role {
  STUDENT
  TUTOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  PENDING
  SUSPENDED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum RequestStatus {
  DRAFT
  OPEN
  APPROVED
  PENDING_REVIEW
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RequestType {
  SCHOOL
  COLLEGE
  UNIVERSITY
  QURAN
  PROJECT_HELP
  OTHER
}

enum Mode {
  ONLINE
  HYBRID
  ONSITE
}

enum ApplicationStatus {
  SUBMITTED
  SHORTLISTED
  FORWARDED_TO_STUDENT
  ACCEPTED_BY_STUDENT
  DECLINED_BY_STUDENT
}

enum AssignmentStatus {
  PENDING_TUTOR_ACCEPT
  ACCEPTED
  REJECTED
  COMPLETED
}

//////////////////////
// MODELS
//////////////////////

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  hashedPassword String
  role           Role
  status         UserStatus @default(PENDING)

  name           String?
  image          String?
  emailVerified  DateTime?

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  studentProfile   StudentProfile?
  tutorProfile     TutorProfile?
  requests         Request[]        @relation("StudentRequests")
  applications     Application[]    @relation("UserApplications")
  assignments      Assignment[]     @relation("UserAssignments")
  notifications    Notification[]
  emailTokens      EmailToken[]
  emailVerifications EmailVerificationToken[]
  otpChallenges    OtpChallenge[]
  throttles        LoginThrottle[]
}

model StudentProfile {
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])

  name          String?
  phone         String?
  phoneAlt      String?
  educationLevel String?
  gender        Gender?
  institute     String?
  addressLine   String?
  location      String?
  countryCode   String?
  stateCode     String?
  cityName      String?
  zip           String?
  cnicPassport  String?
  notes         String?
  image         String?
  dob           DateTime?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model TutorProfile {
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])

  bio         String?
  subjects    String?
  experience  Int?
  hourlyRate  Int?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Request {
  id              String        @id @default(cuid())
  studentId       String
  student         User          @relation("StudentRequests", fields: [studentId], references: [id])

  title           String?
  description     String?
  type            RequestType
  status          RequestStatus @default(OPEN)

  mode            Mode?
  budgetMin       Int?
  budgetMax       Int?
  currency        String?

  contactName     String?
  contactPhone    String?
  contactEmail    String?

  reqAddressLine  String?
  reqCountryCode  String?
  reqStateCode    String?
  reqCityName     String?
  reqZip          String?

  preferredTimeStart String?
  preferredTimeEnd   String?
  preferredLanguage  String?

  subjects        String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  applications    Application[]
  assignments     Assignment[]
}

model Application {
  id          String            @id @default(cuid())
  requestId   String
  tutorId     String
  status      ApplicationStatus @default(SUBMITTED)

  coverNote   String?           // <-- REQUIRED by your route
  proposedFee Int?
  schedule    String?

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  request     Request           @relation(fields: [requestId], references: [id])
  tutor       User              @relation("UserApplications", fields: [tutorId], references: [id])
}

model Assignment {
  id         String           @id @default(cuid())
  requestId  String
  tutorId    String
  status     AssignmentStatus @default(PENDING_TUTOR_ACCEPT)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  request    Request  @relation(fields: [requestId], references: [id])
  tutor      User     @relation("UserAssignments", fields: [tutorId], references: [id])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tokenHash String   @unique
  createdAt DateTime @default(now())
}

model EmailToken {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  tokenHash  String   @unique
  type       String
  createdAt  DateTime @default(now())
}

model OtpChallenge {
  id         String   @id @default(cuid())
  email      String
  reason     String
  codeHash   String
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model LoginThrottle {
  id            String   @id @default(cuid())
  email         String
  role          Role
  count         Int      @default(0)
  lastAttemptAt DateTime
  lockedUntil   DateTime?
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  body      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
